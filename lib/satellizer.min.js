!function(t,e){"use strict";function o(t){var o,n,r={};return e.forEach((t||"").split("&"),function(t){t&&(n=t.split("="),o=decodeURIComponent(n[0]),r[o]=e.isDefined(n[1])?decodeURIComponent(n[1]):!0)}),r}function n(t){return t.replace(/([\:\-\_]+(.))/g,function(t,e,o,n){return n?o.toUpperCase():o})}var r={logoutRedirect:"/",loginRedirect:"/",loginUrl:"/auth/login",signupUrl:"/auth/signup",signupRedirect:"/login",loginRoute:"/login",signupRoute:"/signup",user:"currentUser"},i={google:{url:"/auth/google",authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",redirectUri:t.location.origin,scope:"openid profile email",requiredUrlParams:["scope"],optionalUrlParams:["display"],display:"popup",type:"oauth2",popupOptions:{width:452,height:633}},facebook:{url:"/auth/facebook",authorizationEndpoint:"https://www.facebook.com/dialog/oauth",redirectUri:t.location.origin,scope:"email",requiredUrlParams:["display"],display:"popup",type:"oauth2",popupOptions:{width:481,height:269}},linkedin:{url:"/auth/linkedin",authorizationEndpoint:"https://www.linkedin.com/uas/oauth2/authorization",redirectUri:t.location.origin,requiredUrlParams:["state"],state:"STATE",type:"oauth2"},twitter:{url:"/auth/twitter",authorizationEndpoint:"https://api.twitter.com/oauth/authenticate",type:"oauth1"}},a=e.module("Satellizer",[]);a.provider("$auth",function(){this.config=r,this.setProvider=function(t){if(!t.name)throw new Error("You did not set a provider's name.");if(!i[t.name])throw new Error("Provider "+t.name+" is not found. Are you trying to add a custom provider? Use addProvider() instead.");e.extend(i[t.name],t)},this.addProvider=function(t){if(!t.name)throw new Error("You did not set a provider's name.");if(i[t.name])throw new Error("Provider "+t.name+" already exists. Use setProvider() instead.");i[t.name]={},e.extend(i[t.name],t)},this.$get=["$interval","$http","$location","$rootScope","$q","$window",function(o,a,u,s,p,c){function h(o){var n=o.width||500,r=o.height||500;return e.extend({left:t.screen.width/2-n/2,top:t.screen.height/2-r/2,width:n,height:r},o)}function l(t){var e=[];for(var o in t)if(t.hasOwnProperty(o)){var n;switch(t[o]){case!0:n="1";break;case!1:n="0";break;default:n=t[o]}e.push(o+"="+n)}return e.join(",")}var d=function(){this.popup=null,this.polling=null};d.prototype.open=function(t,e){var o=p.defer(),n=l(h(e||{}));return this.popup=c.open(t,"ngAuth",n),this.popup.focus(),this.postMessageHandler(o),this.pollPopup(o),o.promise},d.prototype.pollPopup=function(t){this.polling=o(function(){this.popup.closed&&(o.cancel(this.polling),t.reject("Popup was closed by the user."))}.bind(this),35)},d.prototype.postMessageHandler=function(t){c.addEventListener("message",function(e){e.origin===c.location.origin&&t.resolve(e.data)},!1)};var f=function(t){e.extend(this,t),this.name=t.name,this.url=t.url,this.authorizationEndpoint=t.authorizationEndpoint,this.popupOptions=t.popupOptions};f.prototype.tokenRequest=function(){return a.post(this.url)},f.prototype.open=function(){var t=p.defer(),e=new d;return e.open(this.url).then(function(e){this.exchangeForToken(e).then(function(e){t.resolve(e.data)})}.bind(this)),t.promise},f.prototype.exchangeForToken=function(t){return a.get(this.url,{params:t})};var g=function(t){e.extend(this,t),this.name=t.name,this.clientId=t.clientId,this.scope=t.scope,this.authorizationEndpoint=t.authorizationEndpoint,this.redirectUri=t.redirectUri,this.responseType="code",this.defaultUrlParams=["response_type","client_id","redirect_uri"],this.requiredUrlParams=t.requiredUrlParams,this.optionalUrlParams=t.optionalUrlParams,this.popupOptions=t.popupOptions};return g.prototype.open=function(){var t=p.defer(),e=this.buildUrl(),o=new d;return o.open(e,this.popupOptions).then(function(e){this.exchangeForToken(e).then(function(e){t.resolve(e.data)})}.bind(this)),t.promise},g.prototype.exchangeForToken=function(t){return a.post(this.url,{code:t.code,clientId:this.clientId,redirectUri:this.redirectUri})},g.prototype.buildUrl=function(){var t=this.authorizationEndpoint,e=this.buildQueryString();return[t,e].join("?")},g.prototype.buildQueryString=function(){var t=this,o=[];return e.forEach(this.defaultUrlParams,function(e){var r=n(e),i=t[r];o.push([e,encodeURIComponent(i)])}),e.forEach(this.requiredUrlParams,function(e){var r=n(e),i=t[r];o.push([e,encodeURIComponent(i)])}),e.forEach(this.optionalUrlParams,function(e){var r=n(e),i=t[r];o.push([e,encodeURIComponent(i)])}),o.map(function(t){return t.join("=")}).join("&")},{authenticate:function(t){if(!t)throw new Error("Expecting a provider name.");if(!i[t])throw new Error("Invalid provider name.");if(!navigator.onLine)return p.reject("Offline");var e,o=p.defer();return e="oauth1"===i[t].type?new f(i[t]):new g(i[t]),e.open().then(function(t){var e=JSON.parse(c.atob(t.split(".")[1]));c.localStorage.jwtToken=t,s[r.user]=e.user,u.path(r.loginRedirect),o.resolve()}),o.promise},login:function(t){if(!t)throw new Error("You must provide a user object.");var e=p.defer();return a.post(r.loginUrl,t).success(function(t){var o=JSON.parse(c.atob(t.token.split(".")[1]));s[r.user]=o.user,u.path(r.loginRedirect),c.localStorage.jwtToken=t.token,e.resolve(o.user)}).error(function(t){e.reject(t)}),e.promise},signup:function(t){a.post(r.signupUrl,t).then(function(){u.path(r.signupRedirect)})},logout:function(){delete s[r.user],delete c.localStorage.jwtToken,u.path(r.logoutRedirect)},isAuthenticated:function(){return Boolean(s.currentUser)}}}]}),a.factory("authInterceptor",["$q","$window","$location",function(t,e,o){return{request:function(t){return e.localStorage.jwtToken&&(t.headers.Authorization="Bearer "+e.localStorage.jwtToken),t},responseError:function(e){return(401===e.status||403===e.status)&&o.path("/login"),t.reject(e)}}}]),a.config(["$httpProvider",function(t){t.interceptors.push("authInterceptor")}]),a.run(["$rootScope","$window","$location",function(t,e,n){var i=e.localStorage.jwtToken;if(i){var a=JSON.parse(e.atob(i.split(".")[1]));t.currentUser=a.user}var u=e.location.search.substring(1),s=o(u);e.opener&&e.opener.location.origin===e.location.origin&&(s.oauth_token&&s.oauth_verifier?e.opener.postMessage({oauth_token:s.oauth_token,oauth_verifier:s.oauth_verifier},"*"):s.code&&e.opener.postMessage({code:s.code},"*"),e.close()),t.$on("$routeChangeStart",function(e,o){!t[r.user]||"/login"!==o.originalPath&&"/signup"!==o.originalPath||n.path("/"),o.authenticated&&!t[r.user]&&n.path("/login")})}])}(window,window.angular);